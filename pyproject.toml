[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "chronoguard"
version = "1.0.0"
description = "Zero-trust proxy for browser automation with temporal controls"
authors = ["ChronoGuard Team <team@chronoguard.com>"]
license = "Apache-2.0"
readme = "README.md"
packages = [
    {include = "core", from = "backend/src"},
    {include = "domain", from = "backend/src"},
    {include = "infrastructure", from = "backend/src"},
    {include = "application", from = "backend/src"},
    {include = "presentation", from = "backend/src"},
    {include = "chronoguard", from = "backend/src"},
]

[tool.poetry.dependencies]
python = "^3.11"
# Web Framework
fastapi = {extras = ["all"], version = "^0.109.0"}
uvicorn = {extras = ["standard"], version = "^0.27.0"}
python-multipart = "^0.0.6"
# Database
sqlalchemy = {extras = ["asyncio"], version = "^2.0.25"}
asyncpg = "^0.29.0"
alembic = "^1.13.1"
psycopg2-binary = "^2.9.9"
# Cache & Queue
redis = {extras = ["hiredis"], version = "^5.0.1"}
celery = {extras = ["redis"], version = "^5.3.6"}
# Observability
loguru = "^0.7.2"
opentelemetry-api = "^1.22.0"
opentelemetry-sdk = "^1.22.0"
opentelemetry-instrumentation-fastapi = "^0.43b0"
opentelemetry-instrumentation-sqlalchemy = "^0.43b0"
opentelemetry-instrumentation-redis = "^0.43b0"
opentelemetry-exporter-otlp-proto-grpc = "^1.22.0"
opentelemetry-exporter-prometheus = "^0.43b0"
opentelemetry-propagator-b3 = "^1.22.0"
# Envoy & OPA
grpcio = "^1.60.0"
grpcio-tools = "^1.60.0"
# Utilities
pydantic = "^2.5.0"
pydantic-settings = "^2.1.0"
python-jose = {extras = ["cryptography"], version = "^3.3.0"}
passlib = {extras = ["bcrypt"], version = "^1.7.4"}
python-dotenv = "^1.0.0"
aiohttp = "^3.9.1"
jinja2 = "^3.1.3"
cryptography = "^41.0.0"

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.4"
pytest-asyncio = "^0.23.3"
pytest-cov = "^4.1.0"
pytest-mock = "^3.12.0"
httpx = "^0.26.0"
faker = "^22.0.0"
freezegun = "^1.4.0"
ruff = "^0.1.14"
black = "^24.3.0"  # Fix CVE-2024-21503
isort = "^5.13.2"
mypy = "^1.8.0"
bandit = {extras = ["toml"], version = "^1.7.6"}
safety = "^3.0.1"

[tool.pytest.ini_options]
asyncio_mode = "auto"
testpaths = ["backend/tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--cov=backend/src",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "-vv",
]

[tool.coverage.run]
source = ["backend/src"]
omit = ["*/tests/*", "*/test_*.py"]
relative_files = true

[tool.coverage.paths]
source = [
    "backend/src",
    "*/ChronoGuard/backend/src",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstractmethod",
]

[tool.ruff]
line-length = 100
target-version = "py311"
exclude = [
    "scripts/",
    "*.egg-info",
    ".venv",
    "__pycache__",
    ".pytest_cache",
    ".mypy_cache",
]

[tool.ruff.lint]
select = ["E", "F", "I", "N", "W", "UP", "ANN", "S", "B", "A", "C4", "DTZ", "T10", "RET", "SIM"]
ignore = [
    "S101",    # Allow assert statements
    "ANN101",  # Missing type annotation for self in method
    "ANN102",  # Missing type annotation for cls in classmethod
    "ANN401",  # Allow typing.Any in specific cases
    "I001",    # Import block un-sorted (handled by isort)
]

[tool.ruff.lint.per-file-ignores]
"backend/tests/**" = [
    "ANN001",  # Missing type annotations for function arguments in tests
    "ANN201",  # Missing return type annotations in tests
    "ANN202",  # Missing return type annotations for private functions in tests
    "B017",    # pytest.raises(Exception) is acceptable in tests
    "DTZ001",  # Naive datetime OK in tests
    "DTZ005",  # datetime.now() without tz OK in tests
    "E402",    # Module level import not at top - OK for test fixtures
    "E501",    # Line too long - OK in tests for readability
    "F401",    # Unused imports OK in tests
    "F841",    # Unused variables OK in tests
    "S108",    # Hardcoded temp file paths OK in tests
]

[tool.mypy]
python_version = "3.11"
strict = true
warn_return_any = false
warn_unused_configs = true
disallow_untyped_defs = true
disallow_any_generics = false
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
ignore_missing_imports = true
exclude = [
    "scripts/",
    "__pycache__",
    ".venv",
]

# Ignore specific error types for library integration
[[tool.mypy.overrides]]
module = "src.*"
ignore_errors = false
disable_error_code = [
    "misc",         # Class inheritance issues with library types
    "attr-defined", # Missing attributes in library modules
    "arg-type",     # Library function signature mismatches
    "return-value", # Library return type mismatches
]

[tool.black]
line-length = 100
target-version = ['py311']
include = '\.pyi?$'
exclude = '''
/(
    \.git
    | \.venv
    | __pycache__
    | scripts
)/
'''

[tool.isort]
profile = "black"
line_length = 100
skip_glob = [
    "scripts/*",
    "__pycache__",
    ".venv/*",
]

[tool.bandit]
# Bandit security scanner configuration
skips = [
    "B104",  # Hardcoded bind all interfaces - Required for proxy infrastructure
    "B701",  # Jinja2 autoescape false - Used for Rego code generation, not HTML
]
exclude_dirs = [
    "backend/tests/",
    ".venv/",
    "__pycache__/",
]