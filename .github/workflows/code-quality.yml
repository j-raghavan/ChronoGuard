name: Code Quality Checks

on:
  push:
    branches: [ master, develop, feat/* ]
  pull_request:
    branches: [ master, develop ]

jobs:
  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry install --no-root

      - name: Run ruff linting
        run: |
          echo "🔍 Running ruff linting..."
          poetry run ruff check backend/src/ backend/tests/ --output-format=github

      - name: Run ruff formatting check
        run: |
          echo "🎨 Checking code formatting..."
          poetry run ruff format --check backend/src/ backend/tests/

      - name: Run black formatting check
        run: |
          echo "🖤 Running black formatting check..."
          poetry run black --check --diff backend/src/ backend/tests/

      - name: Run isort import sorting check
        run: |
          echo "📦 Checking import sorting..."
          poetry run isort --check-only --diff backend/src/ backend/tests/

      - name: Run mypy type checking
        run: |
          echo "🔍 Running mypy type checking..."
          poetry run mypy backend/src/ --show-error-codes --show-error-context

      - name: Run bandit security analysis
        run: |
          echo "🔒 Running security analysis..."
          poetry run bandit -r backend/src/ -f json -o bandit-report.json || true
          poetry run bandit -r backend/src/ -f txt

      - name: Run safety dependency check
        run: |
          echo "🛡️ Skipping Safety CLI (requires interactive login)"

      - name: Python syntax compilation check
        run: |
          echo "⚙️ Checking Python syntax compilation..."
          python -m py_compile $(find backend/src/ -name "*.py")

      - name: Import validation
        run: |
          echo "📥 Validating module imports..."
          PYTHONPATH=backend/src poetry run python -c "
          from core.features import FeatureManager; print('✅ Core systems')
          from domain.agent import Agent; print('✅ Agent domain')
          from domain.policy import Policy; print('✅ Policy domain')
          from domain.audit import AuditEntry; print('✅ Audit domain')
          print('🎉 All modules import successfully')
          "

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            backend/bandit-report.json
          retention-days: 30

  frontend-quality:
    name: Frontend Code Quality
    runs-on: ubuntu-latest
    # Disabled until frontend is implemented
    if: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: |
          npm ci

      - name: Run ESLint
        working-directory: ./frontend
        run: |
          echo "🔍 Running ESLint..."
          npm run lint

      - name: Run Prettier formatting check
        working-directory: ./frontend
        run: |
          echo "🎨 Checking Prettier formatting..."
          npm run format:check

      - name: Run TypeScript type checking
        working-directory: ./frontend
        run: |
          echo "🔍 Running TypeScript type checking..."
          npm run type-check

      - name: Build frontend
        working-directory: ./frontend
        run: |
          echo "🏗️ Building frontend..."
          npm run build