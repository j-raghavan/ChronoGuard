# Production-grade Docker Compose for ChronoGuard
version: '3.8'

services:
  # ChronoGuard Backend API
  chronoguard-api:
    build:
      context: ../../backend
      dockerfile: Dockerfile
      target: production
    image: chronoguard/api:latest
    container_name: chronoguard-api
    restart: unless-stopped
    environment:
      - CHRONOGUARD_ENV=production
      - DATABASE_URL=postgresql://chronoguard:${DB_PASSWORD}@postgres:5432/chronoguard
      - REDIS_URL=redis://redis:6379/0
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://jaeger:4317
      - SECRET_KEY=${SECRET_KEY}
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - chronoguard-network
    volumes:
      - chronoguard-logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL with TimescaleDB
  postgres:
    image: timescale/timescaledb:latest-pg15
    container_name: chronoguard-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=chronoguard
      - POSTGRES_USER=chronoguard
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - PGDATA=/var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - chronoguard-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U chronoguard -d chronoguard"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7.2-alpine
    container_name: chronoguard-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD} --maxmemory 256mb --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - chronoguard-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Envoy Proxy
  envoy:
    image: envoyproxy/envoy:v1.28-latest
    container_name: chronoguard-envoy
    restart: unless-stopped
    ports:
      - "10000:10000"  # Admin interface
      - "9901:9901"    # Admin HTTP
    volumes:
      - ../../configs/envoy/envoy.yaml:/etc/envoy/envoy.yaml:ro
    networks:
      - chronoguard-network
    depends_on:
      - chronoguard-api
    command: ["/usr/local/bin/envoy", "-c", "/etc/envoy/envoy.yaml", "-l", "info"]

  # Open Policy Agent
  opa:
    image: openpolicyagent/opa:latest-envoy
    container_name: chronoguard-opa
    restart: unless-stopped
    ports:
      - "8181:8181"
    volumes:
      - ../../configs/opa/policies:/policies:ro
    networks:
      - chronoguard-network
    command: [
      "run",
      "--server",
      "--addr=0.0.0.0:8181",
      "--diagnostic-addr=0.0.0.0:8182",
      "--set=plugins.envoy_ext_authz_grpc.addr=:9192",
      "--set=plugins.envoy_ext_authz_grpc.enable_reflection=true",
      "/policies"
    ]

  # Prometheus Metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: chronoguard-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - chronoguard-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: chronoguard-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
      - ./grafana/dashboards:/var/lib/grafana/dashboards:ro
    networks:
      - chronoguard-network
    depends_on:
      - prometheus

  # Jaeger Tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: chronoguard-jaeger
    restart: unless-stopped
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    ports:
      - "16686:16686"  # Jaeger UI
      - "14268:14268"  # Jaeger HTTP collector
      - "4317:4317"    # OTLP gRPC receiver
      - "4318:4318"    # OTLP HTTP receiver
    networks:
      - chronoguard-network

  # Nginx Load Balancer (optional)
  nginx:
    image: nginx:alpine
    container_name: chronoguard-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ../../configs/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ../../configs/nginx/ssl:/etc/nginx/ssl:ro
    networks:
      - chronoguard-network
    depends_on:
      - chronoguard-api

networks:
  chronoguard-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  chronoguard-logs:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local