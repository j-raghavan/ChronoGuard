# Complete ChronoGuard Stack - All 6 services with dependencies
version: '3.8'

services:
  # 1. ChronoGuard Proxy - Envoy forward proxy with TLS, DFP, and OPA ext_authz
  chronoguard-proxy:
    image: chronoguard/proxy:latest
    container_name: chronoguard-proxy
    restart: unless-stopped
    environment:
      - ENVOY_LOG_LEVEL=info
    ports:
      - "8080:8080"   # Forward proxy port
      - "9901:9901"   # Admin interface
    depends_on:
      chronoguard-policy-engine:
        condition: service_healthy
    networks:
      - chronoguard-network
    volumes:
      - ./certs:/etc/envoy/certs:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9901/ready"]
      interval: 15s
      timeout: 5s
      retries: 3

  # 2. ChronoGuard Policy Engine - OPA with temporal-access Rego bundle
  chronoguard-policy-engine:
    image: chronoguard/policy-engine:latest
    container_name: chronoguard-policy-engine
    restart: unless-stopped
    environment:
      - OPA_LOG_LEVEL=info
    ports:
      - "8181:8181"   # OPA HTTP API
      - "8182:8182"   # OPA diagnostics
      - "9192:9192"   # gRPC for Envoy ext_authz
    networks:
      - chronoguard-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8181/health"]
      interval: 15s
      timeout: 5s
      retries: 3

  # 3. ChronoGuard Audit Sink - Ingests decisions and creates hash-chained records
  chronoguard-audit-sink:
    image: chronoguard/audit-sink:latest
    container_name: chronoguard-audit-sink
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgresql://chronoguard:${DB_PASSWORD}@postgres:5432/chronoguard
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
    ports:
      - "8001:8001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - chronoguard-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 4. ChronoGuard Metrics Exporter - Prometheus/OTel metrics
  chronoguard-metrics-exporter:
    image: chronoguard/metrics-exporter:latest
    container_name: chronoguard-metrics-exporter
    restart: unless-stopped
    environment:
      - REDIS_URL=redis://redis:6379/0
      - DATABASE_URL=postgresql://chronoguard:${DB_PASSWORD}@postgres:5432/chronoguard
    ports:
      - "8002:8002"
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - chronoguard-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 5. ChronoGuard Dashboard - Minimal UI for visualization
  chronoguard-dashboard:
    image: chronoguard/dashboard:latest
    container_name: chronoguard-dashboard
    restart: unless-stopped
    environment:
      - NEXT_PUBLIC_API_URL=http://chronoguard-api:8000
      - NEXT_PUBLIC_METRICS_URL=http://chronoguard-metrics-exporter:8002
    ports:
      - "3000:3000"
    depends_on:
      chronoguard-api:
        condition: service_healthy
      chronoguard-metrics-exporter:
        condition: service_healthy
    networks:
      - chronoguard-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 6. ChronoGuard Playwright Runner - Smoke tests and demos
  chronoguard-playwright-runner:
    image: chronoguard/playwright-runner:latest
    container_name: chronoguard-playwright-runner
    restart: "no"  # Run on-demand for testing
    environment:
      - PROXY_URL=http://chronoguard-proxy:8080
      - API_URL=http://chronoguard-api:8000
      - TEST_MODE=smoke
    ports:
      - "8003:8003"
    depends_on:
      chronoguard-proxy:
        condition: service_healthy
      chronoguard-api:
        condition: service_healthy
    networks:
      - chronoguard-network
    volumes:
      - playwright-reports:/app/reports
      - playwright-screenshots:/app/screenshots

  # Supporting Infrastructure Services

  # ChronoGuard Main API
  chronoguard-api:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    image: chronoguard/api:latest
    container_name: chronoguard-api
    restart: unless-stopped
    environment:
      - CHRONOGUARD_ENV=production
      - DATABASE_URL=postgresql://chronoguard:${DB_PASSWORD}@postgres:5432/chronoguard
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://jaeger:4317
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - chronoguard-network
    volumes:
      - chronoguard-logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL with TimescaleDB
  postgres:
    image: timescale/timescaledb:latest-pg15
    container_name: chronoguard-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=chronoguard
      - POSTGRES_USER=chronoguard
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - PGDATA=/var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - chronoguard-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U chronoguard -d chronoguard"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache and Streams
  redis:
    image: redis:7.2-alpine
    container_name: chronoguard-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD} --maxmemory 512mb --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - chronoguard-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: chronoguard-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - chronoguard-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: chronoguard-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "3001:3000"  # Different port to avoid conflict with dashboard
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - chronoguard-network
    depends_on:
      - prometheus
      - chronoguard-metrics-exporter

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: chronoguard-jaeger
    restart: unless-stopped
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    ports:
      - "16686:16686"  # Jaeger UI
      - "14268:14268"  # HTTP collector
      - "4317:4317"    # OTLP gRPC
      - "4318:4318"    # OTLP HTTP
    networks:
      - chronoguard-network

networks:
  chronoguard-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.30.0.0/16

volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  chronoguard-logs:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  playwright-reports:
    driver: local
  playwright-screenshots:
    driver: local